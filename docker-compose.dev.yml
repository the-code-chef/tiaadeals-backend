services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: tiaadeals-postgres-dev
    environment:
      POSTGRES_DB: tiaadeals
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - '5432:5432'
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - tiaadeals-network-dev
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d tiaadeals']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: tiaadeals-redis-dev
    ports:
      - '6379:6379'
    volumes:
      - redis_data_dev:/data
    networks:
      - tiaadeals-network-dev
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # Spring Boot Application (Development)
  backend:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: tiaadeals-backend-dev
    environment:
      # Database Configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/tiaadeals
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password

      # JWT Configuration
      JWT_SECRET: your-super-secret-jwt-key-for-tiaadeals-backend-2024-dev
      JWT_EXPIRATION: 86400000
      JWT_REFRESH_EXPIRATION: 604800000

      # Redis Configuration
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379

      # Server Configuration
      SERVER_PORT: 8080

      # Development Configuration
      SPRING_PROFILES_ACTIVE: dev
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: true

      # Logging
      LOGGING_LEVEL_COM_TIAADEALS_BACKEND: DEBUG
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: DEBUG
      LOGGING_LEVEL_ORG_HIBERNATE_SQL: DEBUG

      # CORS Configuration
      SPRING_WEB_CORS_ALLOWED_ORIGINS: '*'
      SPRING_WEB_CORS_ALLOWED_METHODS: 'GET,POST,PUT,DELETE,OPTIONS'
      SPRING_WEB_CORS_ALLOWED_HEADERS: '*'
    ports:
      - '8080:8080'
      - '5005:5005' # Debug port
    volumes:
      - .:/app
      - maven_cache:/root/.m2
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tiaadeals-network-dev
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/actuator/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    restart: unless-stopped

  # Adminer for database management
  adminer:
    image: adminer:latest
    container_name: tiaadeals-adminer-dev
    ports:
      - '8081:8080'
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - tiaadeals-network-dev

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: tiaadeals-redis-commander-dev
    ports:
      - '8082:8081'
    environment:
      REDIS_HOSTS: local:redis:6379
    depends_on:
      - redis
    networks:
      - tiaadeals-network-dev

volumes:
  postgres_data_dev:
    driver: local
  redis_data_dev:
    driver: local
  maven_cache:
    driver: local

networks:
  tiaadeals-network-dev:
    driver: bridge
