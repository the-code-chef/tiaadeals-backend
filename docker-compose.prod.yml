services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: tiaadeals-postgres-prod
    environment:
      POSTGRES_DB: tiaadeals
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - tiaadeals-network-prod
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-postgres} -d tiaadeals']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: tiaadeals-redis-prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    ports:
      - '6379:6379'
    volumes:
      - redis_data_prod:/data
    networks:
      - tiaadeals-network-prod
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Spring Boot Application (Production)
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tiaadeals-backend-prod
    environment:
      # Database Configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/tiaadeals
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-postgres}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-password}

      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-86400000}
      JWT_REFRESH_EXPIRATION: ${JWT_REFRESH_EXPIRATION:-604800000}

      # Redis Configuration
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: ${REDIS_PASSWORD:-}

      # Server Configuration
      SERVER_PORT: 8080

      # Production Configuration
      SPRING_PROFILES_ACTIVE: prod
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      SPRING_JPA_SHOW_SQL: false

      # Logging
      LOGGING_LEVEL_COM_TIAADEALS_BACKEND: INFO
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: WARN
      LOGGING_LEVEL_ORG_HIBERNATE_SQL: WARN

      # CORS Configuration
      SPRING_WEB_CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-*}
      SPRING_WEB_CORS_ALLOWED_METHODS: 'GET,POST,PUT,DELETE,OPTIONS'
      SPRING_WEB_CORS_ALLOWED_HEADERS: '*'

      # JVM Configuration
      JAVA_OPTS: '-Xms512m -Xmx1024m -XX:+UseG1GC -XX:+UseContainerSupport'
    ports:
      - '8080:8080'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tiaadeals-network-prod
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/actuator/health']
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 120s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: tiaadeals-nginx-prod
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - backend
    networks:
      - tiaadeals-network-prod
    restart: unless-stopped

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local

networks:
  tiaadeals-network-prod:
    driver: bridge
