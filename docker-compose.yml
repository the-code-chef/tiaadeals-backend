services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: tiaadeals-postgres
    environment:
      POSTGRES_DB: tiaadeals
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - tiaadeals-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d tiaadeals']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: tiaadeals-redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - tiaadeals-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # Spring Boot Application
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tiaadeals-backend
    environment:
      # Database Configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/tiaadeals
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password

      # JWT Configuration
      JWT_SECRET: your-super-secret-jwt-key-for-tiaadeals-backend-2024
      JWT_EXPIRATION: 86400000
      JWT_REFRESH_EXPIRATION: 604800000

      # Redis Configuration
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379

      # Server Configuration
      SERVER_PORT: 8080

      # Logging
      LOGGING_LEVEL_COM_TIAADEALS_BACKEND: DEBUG
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: DEBUG

      # CORS Configuration
      SPRING_WEB_CORS_ALLOWED_ORIGINS: '*'
      SPRING_WEB_CORS_ALLOWED_METHODS: 'GET,POST,PUT,DELETE,OPTIONS'
      SPRING_WEB_CORS_ALLOWED_HEADERS: '*'
    ports:
      - '8080:8080'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tiaadeals-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/actuator/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: tiaadeals-nginx
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
    networks:
      - tiaadeals-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  tiaadeals-network:
    driver: bridge
